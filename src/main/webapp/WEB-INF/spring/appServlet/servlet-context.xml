<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven>
		<argument-resolvers>
			<beans:bean
				class="com.clustering.project.component.CustomizeMethodArgumentResolver"></beans:bean>
		</argument-resolvers>
	</annotation-driven>

	<!-- Exception Resolvers -->
	<beans:bean
		class="com.clustering.project.component.CustomizeHandlerExceptionResolver">
		<beans:property name="exceptionResolvers">
			<beans:list>
<!-- 				<beans:bean
					class="org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver" />
 --> 				<beans:bean
					class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
					<beans:property name="exceptionMappings">
						<beans:props>
							<beans:prop key="org.springframework.dao.DataAccessException" />
							<beans:prop key="org.apache.tiles.request.render.CannotRenderException" />
						</beans:props>
					</beans:property>
					<beans:property name="defaultErrorView" value="/exception/handlerexception" />
				</beans:bean>
			</beans:list>
		</beans:property>
		<beans:property name="order" value="0" />
	</beans:bean>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass">
			<beans:value>
				org.springframework.web.servlet.view.tiles3.TilesView
			</beans:value>
		</beans:property>
		<!-- <beans:property name="order" value="1" /> -->
	</beans:bean>
	<!-- Popup > <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<beans:property name="prefix" value="/WEB-INF/views/" /> <beans:property 
		name="suffix" value=".jsp" /> <beans:property name="order" value="2" /> </beans:bean -->

	<!-- tiles Configuration -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tilesdef/tilesdef.xml</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" />
	</beans:bean>

	<!-- file upload -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="resolveLazily" value="true" />
	</beans:bean>

	<context:component-scan
		base-package="com.clustering.project">
	</context:component-scan>

	<!-- add for aspectj annotation -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="false" expose-proxy="true"/> -->

	<!-- add for scaning any context configration -->
	<context:annotation-config />

</beans:beans>
